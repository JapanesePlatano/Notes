# Cross-Site Scripting (XSS)

## Description
Cross-Site Scripting (XSS) is a type of security vulnerability that allows attackers to inject malicious scripts into web pages viewed by other users. These scripts can execute in the context of the user's browser, potentially leading to session hijacking, defacement, or redirection to malicious sites. The primary cause of XSS is the failure of web applications to properly validate and sanitize user inputs. There are three main types of XSS: Stored XSS, Reflected XSS, and DOM-based XSS.

## Risk Factors

Likelihood: High. XSS vulnerabilities are prevalent due to the complexity of handling user-generated content securely.

Technical Impact: High. Successful XSS attacks can lead to unauthorized actions, theft of session cookies, and execution of arbitrary scripts.

Business Impact: High. XSS can result in data breaches, loss of user trust, brand damage, and compliance violations.

## Examples

1.Stored XSS: An attacker injects a malicious script into a comment field on a forum. When other users view the comment, the script executes, potentially stealing their session cookies.
    ```html
    <script>document.cookie='session='+document.cookie;</script>
    ```

2.Reflected XSS: An attacker sends a malicious URL to a victim. The URL contains a script that executes when the URL is opened, leading to actions like session hijacking.
    ```html
    http://example.com/search?q=<script>alert('XSS')</script>
    ```

3.DOM-based XSS: An attacker manipulates the DOM environment directly, such as by injecting a script through a URL fragment that the application then processes unsafely.
    ```javascript
    document.write(location.hash.substring(1));
    ```

## Related Attacks

Session Hijacking

Defacement

Data Theft

Related Vulnerabilities
SQL Injection

Command Injection

CSRF (Cross-Site Request Forgery)

## Related Controls

Input Validation: Validate all user inputs to ensure they conform to expected formats. Reject any input that contains potentially dangerous characters.

Output Encoding: Encode output data to ensure that it is treated as data, not code. Use appropriate encoding based on the context (HTML, JavaScript, URL).
    ```html
    <!-- Example of HTML encoding -->
    <div> 
        <%= encodeForHTML(userInput) %> 
    </div>
    ```
Content Security Policy (CSP): Implement CSP to restrict the sources from which scripts can be loaded and executed.
    ```http
    Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-random123';
    ```
Escaping User Inputs: Escape user inputs before using them in the HTML, JavaScript, or URL context.
Web Application Firewalls (WAF): Deploy WAFs to filter out malicious input before it reaches the application.

## Related Technical Impacts

Unauthorized execution of scripts

Session hijacking

Defacement of web pages

Data theft

## References

[OWASP XSS](https://owasp.org/www-community/attacks/xss/)
[OWASP Testing Guide: XSS](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04.3-Testing_for_Cross_site_scripting)
[CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)

## Categorization

Input Validation Vulnerability
